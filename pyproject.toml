[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "clyo"
description = "Give your Python scripts various flavours of CLI!"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
  { name = "Axel Voitier", email = "axel.voitier@gmail.com" },
]
requires-python = "~=3.8"
# keywords = []
classifiers = [
  # "Development Status :: 1 - Planning",
  # "Development Status :: 2 - Pre-Alpha",
  "Development Status :: 3 - Alpha",
  # "Development Status :: 4 - Beta",
  # "Development Status :: 5 - Production/Stable",
  "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",  # Py3.8 EOL: 2024/10
  "Programming Language :: Python :: 3.9",  # Py 3.9 EOL: 2025/10
  "Programming Language :: Python :: 3.10",  # Py 3.10 EOL: 2026/10
  "Programming Language :: Python :: 3.11",  # Py 3.11 EOL: 2027/10
  "Programming Language :: Python :: 3.12",  # Py 3.12 EOL: 2028/10
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Typing :: Typed",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["version"]
dependencies = [
  "typer[all]",
  "prompt_toolkit",
  "typing-extensions",
]

# [project.optional-dependencies]
# an_extra = [ ]

# [project.scripts]
# clyo-cli = "clyo.__main__:main"

[project.urls]
Homepage = "https://github.com/AxelVoitier/clyo"
Documentation = "https://github.com/AxelVoitier/clyo#readme"
Issues = "https://github.com/AxelVoitier/clyo/issues"
Source = "https://github.com/AxelVoitier/clyo.git"

[tool.hatch.version]
path = "clyo/__about__.py"

[tool.hatch.build.targets.sdist]
include = [
  "clyo",
  "tests",
  "docs",
  "doc_templates",
  "mkdocs.yaml",
  ".flake8",
  "*.md",
]

[tool.hatch.build.targets.wheel]
package = "clyo"

[tool.hatch.envs.lint]
dependencies = [
  "ruff",
]

[tool.hatch.envs.lint.scripts]
check = "ruff check clyo tests"

[tool.hatch.envs.typing]
dependencies = [
  "mypy",
  "pyright",
  "pytest",  # Because it is imported in test files
]

[tool.hatch.envs.typing.scripts]
check-pyright = "pyright clyo tests"
check-mypy = "mypy clyo tests"
check = [
  "check-pyright",
  "check-mypy",
]

[[tool.hatch.envs.typing.matrix]]
python = [
  "3.10",
  "3.11",
  "3.12",
]

[tool.hatch.envs.tests]
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-html",
]

[tool.hatch.envs.tests.scripts]
run = "py.test --cov=clyo --cov-report=term-missing --cov-report=xml:cov.xml tests"
run-x = "py.test --cov=clyo --cov-report=term-missing --cov-report=xml:cov.xml -x tests"

[[tool.hatch.envs.tests.matrix]]
python = [
  "3.8",
  "3.9",
  "3.10",
  "3.11",
  "3.12",
]

[tool.hatch.envs.doc]
detached = true
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings[python]",
  "mkdocs-gen-files",
  "mkdocs-literate-nav",
  "mkdocs-section-index",
  "pillow",
  "cairosvg",
  "mike",
  "mkdocs-git-revision-date-localized-plugin",
]

[tool.hatch.envs.doc.scripts]
build = "mkdocs build --clean --strict"
serve = "ENABLE_PROD=False mkdocs serve --dev-addr localhost:8000"

[tool.mypy]
show_column_numbers = true
show_error_context = false
strict = true
ignore_missing_imports = false

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # "C408",  # "Unnecessary" `dict`, `list` or `tuple` calls instead of literals
  "Q",  # Quotes
  "ANN101",  # Annotate self
  "ANN102",  # Annotate cls
  "SLF001",  # Access private _member
  "RET505",  # Else after return
  "ARG002",  #Â Unused method argument
  "PLW0603",  # Global statement to update variable
  "PLR0913",  # Too many arguments

  "D",  # Temporarily: docstrings
  "ERA001",  # Temporarily: commented out code
]

[tool.ruff.per-file-ignores]
"tests/*" = [
  "D",  # Docstrings
  "S101",  # Use of assert
]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["help"]

[tool.ruff.format]
quote-style = "single"
skip-magic-trailing-comma = false

[tool.pyright]
include = [
  "clyo",
  "tests",
]
exclude = [
  "tests/typing",
]
typeCheckingMode = "strict"
reportPrivateUsage = "none"
reportImplicitOverride = "error"  # PEP 698, python>=3.12
reportImportCycles = "information"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "information"
reportShadowedImports = "information"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "information"
